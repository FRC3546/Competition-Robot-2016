// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3546.subsystems;


import edu.wpi.first.wpilibj.*;
import org.usfirst.frc3546.RobotMap;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.SpeedController;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Climbing extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController climbingArmExtensionMotor = RobotMap.climbingClimbingArmExtensionMotor;
    private final SpeedController climbingWinchMotor = RobotMap.climbingClimbingWinchMotor;
    private final DoubleSolenoid armRotatationSolenoid = RobotMap.climbingArmRotatationSolenoid;
    private final Encoder climbingArmExtensionEncoder = RobotMap.climbingClimbingArmExtensionEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static final double WINCH_IN_SPEED = .75;
    public static final double WINCH_OUT_SPEED = WINCH_IN_SPEED;
    public static final double SLOW_WINCH_SPEED = .6;
    public static final double ARM_IN_SPEED = 1.0;
    public static final double ARM_OUT_SPEED = 1.0;
    public static final double ENCODER_LIMIT = 10900;
    public static final DoubleSolenoid.Value ARM_UP = DoubleSolenoid.Value.kForward;
    public static final DoubleSolenoid.Value ARM_DOWN = DoubleSolenoid.Value.kReverse;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        setArmPositionValve(ARM_DOWN);
    }

    public void letWinchOut(){
        climbingWinchMotor.set(WINCH_OUT_SPEED);
    }

    public void letWinchOutSlowly(){
        climbingWinchMotor.set(SLOW_WINCH_SPEED);
    }

    public void pullWinchDown(){
        climbingWinchMotor.set(-WINCH_IN_SPEED);
    }

    public void stopWinch() {
        climbingWinchMotor.set(0);
    }

    public void extendArm(){
        climbingArmExtensionMotor.set(ARM_OUT_SPEED);
    }

    public void retractArm(){
        climbingArmExtensionMotor.set(-ARM_IN_SPEED);
    }

    public void stopArm(){
        climbingArmExtensionMotor.set(0);
    }

    public void setArmPositionValve(DoubleSolenoid.Value valvePosition){
        armRotatationSolenoid.set(valvePosition);
    }

    public DoubleSolenoid.Value getArmPositionValve() {
        return armRotatationSolenoid.get();
    }

    public void invertArmPositionValve() {
        if (getArmPositionValve() == ARM_UP){
            setArmPositionValve(ARM_DOWN);
        } else {
            setArmPositionValve(ARM_UP);
        }
    }

    public boolean isBelowUpper(){
//        System.out.println(getArmLength());
        return getArmLength() < ENCODER_LIMIT;
    }

    public boolean isAboveLow(){
//        System.out.println(getArmLength());
        return getArmLength() > 0;
    }

    public double getArmLength(){
        return climbingArmExtensionEncoder.getDistance();
    }
}

