// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3546;

import org.usfirst.frc3546.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc3546.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton sweeperBarRotationInButton;
    public JoystickButton sweeperBarRotationOutButton;
    public Joystick leftJoystick;
    public JoystickButton climbingWinchPullInButton;
    public JoystickButton sweeperArmPositionLowerButton;
    public JoystickButton climbingArmRotateOutButton;
    public JoystickButton climbingArmRotateInButton;
    public JoystickButton climbingArmExtendButton;
    public JoystickButton cimbingWinchLetOutButton;
    public JoystickButton sweeperArmPositionRaiseButton;
    public Joystick rightJoystick;
    public JoystickButton climbingAuthorization1;
    public JoystickButton climbingAuthorization2;
    public Joystick climbingJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static final double CLIMBING_JOYSTICK_THRESHOLD = .6;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        climbingJoystick = new Joystick(2);
        
        climbingAuthorization2 = new JoystickButton(climbingJoystick, 2);
        climbingAuthorization2.whileHeld(new ClimbingStage2());
        climbingAuthorization1 = new JoystickButton(climbingJoystick, 1);
        climbingAuthorization1.whileHeld(new ClimbingStage1());
        rightJoystick = new Joystick(1);
        
        sweeperArmPositionRaiseButton = new JoystickButton(rightJoystick, 3);
        sweeperArmPositionRaiseButton.whileHeld(new SweeperArmPositionRaise());
        cimbingWinchLetOutButton = new JoystickButton(rightJoystick, 1);
        cimbingWinchLetOutButton.whileHeld(new CimbingWinchLetOut());
        climbingArmExtendButton = new JoystickButton(rightJoystick, 1);
        climbingArmExtendButton.whileHeld(new ClimbingArmExtend());
        climbingArmRotateInButton = new JoystickButton(rightJoystick, 1);
        climbingArmRotateInButton.whenPressed(new ClimbingArmRotateIn());
        climbingArmRotateOutButton = new JoystickButton(rightJoystick, 1);
        climbingArmRotateOutButton.whenPressed(new ClimbingArmRotateOut());
        sweeperArmPositionLowerButton = new JoystickButton(rightJoystick, 2);
        sweeperArmPositionLowerButton.whileHeld(new SweeperArmPositionLower());
        climbingWinchPullInButton = new JoystickButton(rightJoystick, 1);
        climbingWinchPullInButton.whileHeld(new ClimbingWinchPullIn());
        leftJoystick = new Joystick(0);
        
        sweeperBarRotationOutButton = new JoystickButton(leftJoystick, 2);
        sweeperBarRotationOutButton.whileHeld(new SweeperBarRotationOut());
        sweeperBarRotationInButton = new JoystickButton(leftJoystick, 1);
        sweeperBarRotationInButton.whileHeld(new SweeperBarRotationIn());


        // SmartDashboard Buttons
        SmartDashboard.putData("CimbingWinchLetOut", new CimbingWinchLetOut());
        SmartDashboard.putData("ClimbingWinchPullIn", new ClimbingWinchPullIn());
        SmartDashboard.putData("ClimbingArmExtend", new ClimbingArmExtend());
        SmartDashboard.putData("ClimbingArmRotateOut", new ClimbingArmRotateOut());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }

    public Joystick getClimbingJoystick() {
        return climbingJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    public boolean isClimbingJoystickForward(){
        return climbingJoystick.getAxis(Joystick.AxisType.kY)
                > CLIMBING_JOYSTICK_THRESHOLD;
    }

    public boolean isClimbingJoystickBackward(){
        return climbingJoystick.getAxis(Joystick.AxisType.kY)
                < -CLIMBING_JOYSTICK_THRESHOLD;
    }

}

